/*************/
/* IMPORT(S) */
/*************/
import java_cup.runtime.*;
import AST.*;

parser code 
{:
	public Lexer lexer;

	public Parser(Lexer lexer)
	{
		super(lexer);
		this.lexer = lexer;
	}
	public void report_error(String message, Object info)
	{
		System.out.print("ERROR >> ");		
		System.out.print("[");
		System.out.print(lexer.getLine());
		System.out.print(":");
		System.out.print(lexer.getCharPos());
		System.out.print("] ");	
	}
:}

/************************/
/* CUSTOMIZE CUP PARSER */
/************************/
scan with
{:
	Symbol s;
	s = lexer.next_token();
	//System.out.print(s.sym);
	System.out.print("[");
	System.out.print(lexer.getLine());
	System.out.print(":");
	System.out.print(lexer.getCharPos());
	System.out.print("] ");
	System.out.print(TokenNames.terminalNames[s.sym]);
	if (s.value != null)
	{
		System.out.print("( ");
		System.out.print(s.value);
		System.out.print(" )");
	}
	System.out.print("\n");
	return s; 
:};

/*************/
/* TERMINALS */
/*************/

terminal DOT;
terminal COMMA;
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal DIVIDE;
terminal GT;
terminal LT;
terminal EQ;
terminal LPAREN;
terminal RPAREN;
terminal LBRACK;
terminal RBRACK;
terminal LBRACE;
terminal RBRACE;
terminal SEMICOLON;
terminal ASSIGN;
terminal IF;
terminal TYPE_INT;
terminal TYPE_STRING;
terminal TYPE_VOID;
terminal ARRAY;
terminal CLASS;
terminal RETURN;
terminal WHILE;
terminal NIL;
terminal EXTENDS;
terminal NEW;

/*************/
/* TERMINALS */
/*************/
terminal Integer INT;
terminal String ID;
terminal String STRING;

/*****************/
/* NON TERMINALS */
/*****************/
non terminal AST_PROGRAM Program;
non terminal AST_DEC dec;
non terminal AST_Type type;
non terminal AST_VAR_DEC varDec;
non terminal AST_FUNC_DEC funcDec;
non terminal AST_CLASS_DEC classDec;
non terminal AST_ARRAY_TYPE_DEF arrayTypedef;
non terminal AST_EXP exp;
non terminal AST_VAR var;
non terminal AST_STMT stmt;
non terminal AST_NEW_EXP newExp;
non terminal AST_C_FIELD cField;
non terminal AST_BINOP BINOP;

non terminal AST_VAR_LIST multiVar;
non terminal AST_STMT_LIST multiStmt;
non terminal AST_CLASS_CONT classCont;
non terminal AST_EXP_LIST multiExp;

/***********************/
/* OPERATOR PRECEDENCE */
/***********************/
precedence left ASSIGN;
precedence left EQ;
precedence left GT,LT;
precedence left PLUS,MINUS;
precedence left TIMES,DIVIDE;
precedence left LBRACK;
precedence left LBRACE;
precedence left DOT;

/************************/
/* START WITH: stmtList */
/************************/
start with Program;

/********************/
/* DERIVATION RULES */
/********************/

Program		::=		dec:d Program:p 	{: RESULT = new AST_PROGRAM(d,p);    :}
					| dec:d				{: RESULT = new AST_PROGRAM(d,null);    :}
					;
dec			::=		varDec:d1			{: RESULT = new AST_DEC(d1);    :}
					| funcDec:d2		{: RESULT = new AST_DEC(d2);    :}
					| classDec:d3		{: RESULT = new AST_DEC(d3);    :}
					| arrayTypedef:d4 	{: RESULT = new AST_DEC(d4);    :}
					;
type		::=		TYPE_INT			{: RESULT = new AST_Type(1);    :}
					| TYPE_STRING		{: RESULT = new AST_Type(2);    :}
					| TYPE_VOID			{: RESULT = new AST_Type(3);    :}
					| ID:id				{: RESULT = new AST_Type(id);    :}
					;
arrayTypedef ::=	ARRAY ID:id EQ type:t LBRACK RBRACK SEMICOLON
					{: RESULT = new AST_ARRAY_TYPE_DEF(id,t);    :}
					;
varDec		::=		type:t ID:id SEMICOLON			{: RESULT = new AST_VAR_DEC(t,id);    :}
					| type:t ID:id ASSIGN exp:e SEMICOLON	{: RESULT = new AST_VAR_DEC(t,id,e);    :}
					| type:t ID:id ASSIGN newExp:new_e	SEMICOLON	{: RESULT = new AST_VAR_DEC(t,id,new_e);    :}
					;
multiVar	::=		type:t ID:id 			{: RESULT = new AST_VAR_LIST(id,null,t);    :}
					| type:t ID:id COMMA multiVar:var {: RESULT = new AST_VAR_LIST(id,var,t);    :}
					;
multiStmt	::=		stmt:s 					{: RESULT = new AST_STMT_LIST(s,null);    :}
					| stmt:s multiStmt:mul_s 	{: RESULT = new AST_STMT_LIST(s,mul_s);    :}
					;
funcDec		::=		type:t ID:id LPAREN RPAREN LBRACE RBRACE	{: RESULT = new AST_FUNC_DEC(t,id,null,null);    :}
					| type:t ID:id LPAREN RPAREN LBRACE multiStmt:mul_stmt RBRACE	{: RESULT = new AST_FUNC_DEC(t,id,null,mul_stmt);    :}
					| type:t ID:id LPAREN multiVar:mul_var RPAREN LBRACE RBRACE	{: RESULT = new AST_FUNC_DEC(t,id,mul_var,null);    :}
					| type:t ID:id LPAREN multiVar:mul_var RPAREN LBRACE multiStmt:mul_stmt RBRACE	{: RESULT = new AST_FUNC_DEC(t,id,mul_var,mul_stmt);    :}
					;
classCont	::=		cField:c1				{: RESULT= new AST_CLASS_CONT(c1,null);	:} 
					| cField:c1 classCont:cont	{: RESULT= new AST_CLASS_CONT(c1,cont);	:} 
					;
classDec	::=		CLASS ID:id LBRACE classCont:cont RBRACE {: RESULT = new AST_CLASS_DEC(id,cont);	:}
					| CLASS ID:id1 EXTENDS ID:id2 LBRACE classCont:cont RBRACE {: RESULT = new AST_CLASS_DEC(id1,id2,cont);	:}
					;
multiExp	::=		exp:e 					{: RESULT= new AST_EXP_LIST(e,null);	:}
					| exp:e COMMA multiExp:mul_e 	{: RESULT= new AST_EXP_LIST(e,mul_e);	:}
					;
exp			::=		var:v					{: RESULT = new AST_EXP_VAR(v);		:}
					| LPAREN exp:e RPAREN {: RESULT = new AST_EXP_PAREN(e);		:}
					| exp:e1 BINOP:op exp:e2		{: RESULT = new AST_EXP_BINOP(e1,e2,op);	:}
					| var:v DOT ID:id LPAREN multiExp:mul_e RPAREN		{: RESULT = new AST_EXP_VAR_FUNC(v,id,mul_e);	:}
					| var:v DOT ID:id LPAREN RPAREN		{: RESULT = new AST_EXP_VAR_FUNC(v,id,null);	:}
					| ID:id LPAREN RPAREN		{: RESULT = new AST_EXP_FUNC(id,null);		:}
					| ID:id LPAREN multiExp:mul_e RPAREN		{: RESULT = new AST_EXP_FUNC(id,mul_e);		:}
					| MINUS INT:num 		{: RESULT = new AST_EXP_INT(-1*num);		:}
					| INT:num				{: RESULT = new AST_EXP_INT(num);		:}
					| NIL				{: RESULT = new AST_EXP_NIL();		:}
					| STRING:s			{: RESULT = new AST_EXP_STRING(s);		:}
					;
var			::=		ID:id					{: RESULT = new AST_VAR_SIMPLE(id);		:}
					| var:v DOT ID:id		{: RESULT = new AST_VAR_FIELD(v,id);		:}
					| var:v LBRACK exp:e RBRACK		{: RESULT = new AST_VAR_SUBSCRIPT(v,e);		:}
					;
stmt		::=		varDec:v_dec				{: RESULT = new AST_STMT_VAR_DEC(v_dec);	:}
					| var:v ASSIGN exp:e SEMICOLON	{: RESULT = new AST_STMT_ASSIGN(v,e);	:}
					| var:v ASSIGN newExp:new_e SEMICOLON	{: RESULT = new AST_STMT_ASSIGN_NEW(v,new_e);	:}
					| RETURN SEMICOLON	{: RESULT = new AST_STMT_RETURN(null);	:}
					| RETURN exp:e SEMICOLON	{: RESULT = new AST_STMT_RETURN(e);	:}
					| IF LPAREN exp:e RPAREN LBRACE multiStmt:mul_stmt RBRACE	{: RESULT = new AST_STMT_IF(e,mul_stmt);	:}
					| WHILE LPAREN exp:e RPAREN LBRACE multiStmt:mul_stmt RBRACE	{: RESULT = new AST_STMT_WHILE(e,mul_stmt);	:}
					| var:v DOT ID:id LPAREN RPAREN SEMICOLON	{: RESULT = new AST_STMT_VAR_FUNC(v,id,null);	:}
					| var:v DOT ID:id LPAREN multiExp:mul_e RPAREN SEMICOLON	{: RESULT = new AST_STMT_VAR_FUNC(v,id,mul_e);	:}
					| ID:id LPAREN multiExp:mul_e RPAREN SEMICOLON	{: RESULT = new AST_STMT_VAR_FUNC(null,id,mul_e);	:}
					;
newExp		::=		NEW type:t			{: RESULT = new AST_NEW_EXP(t,null);	:}
					| NEW type:t LBRACK exp:e RBRACK	{: RESULT = new AST_NEW_EXP(t,e);	:}
					;
cField		::=		varDec:v				{: RESULT = new AST_C_FIELD(v);	:}
					| funcDec:f			{: RESULT = new AST_C_FIELD(f);	:}
					;
BINOP		::=		PLUS				{: RESULT = new AST_BINOP(1);	:}
					| MINUS				{: RESULT = new AST_BINOP(2);	:}
					| TIMES				{: RESULT = new AST_BINOP(3);	:}
					| DIVIDE			{: RESULT = new AST_BINOP(4);	:}
					| EQ				{: RESULT = new AST_BINOP(5);	:}
					| LT				{: RESULT = new AST_BINOP(6);	:}
					| GT				{: RESULT = new AST_BINOP(7);	:}
					;

